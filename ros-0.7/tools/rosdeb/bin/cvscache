#! /usr/bin/env python

"""
usage: %(progname)s url localpath version
"""


import os, sys, string, time, getopt, re

import subprocess

def test():
  pass

def usage(progname):
  print __doc__ % vars()

def main(argv, stdout, environ):
  progname = argv[0]

  url = None
  
  optlist, args = getopt.getopt(argv[1:], "z:d:", [])

  for (field, val) in optlist:
    if field == "-d":
      url = val

  cmd = args[0]

  if cmd not in ("co", "checkout"):
    subprocess.call(["cvs"] + argv[1:])
    return

  optlist2, args2 = getopt.getopt(args[1:], "D:d:P", [])

  repository = args2[0]

  revision = None
  localpath = None

  for (field, val) in optlist2:
    if field == "-D":
      revision = val
    elif field == "-d":
      localpath = val

  svnpath = os.path.join(localpath, "CSV", "Entries")
  if os.path.exists(svnpath):
    subprocess.call(["cvs"] + argv[1:])
    return

  if revision is None:
    subprocess.call(["cvs"] + argv[1:])
    return

  import sha
  sha1 = sha.sha(url + "/" + revision + "/" + repository).hexdigest()


  revision2 = revision.replace(" ", "_").replace("/", "_").replace(":", "_")
  cacheurl = "http://pr.willowgarage.com/downloads/packages/%s_%s_%s.tar.bz2" % (repository, revision2, sha1)

  tarfn = os.path.split(cacheurl)[1]

  if not os.path.exists(tarfn):
    ## fetch tarball
    p = subprocess.Popen(["wget", "-q", cacheurl])
    pid,sts = os.waitpid(p.pid, 0)

    if sts != 0:
      subprocess.call(["cvs"] + argv[1:])
      return

  ## unpack tarball
  p = subprocess.Popen(["tar", "xf", tarfn])
  pid,sts = os.waitpid(p.pid, 0)

  os.unlink(tarfn)


if __name__ == "__main__":
  main(sys.argv, sys.stdout, os.environ)
